#!/usr/bin/env python

"""
Monitor civstats and record statistics
"""

import argparse, sys, os, doctest, re, time

from bagger_common import expect, run_cmd, update_db_file, set_verbosity

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n%s [--verbose]
OR
%s --help
OR
%s --test

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run \033[0m
    > %s http://www.civstats.com/viewgame.php?gameid=2890 ndsgame8.bag &
""" % ((os.path.basename(args[0]), ) * 4),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Print extra information.")

    parser.add_argument("-i", "--interval", type=int, default=3600,
                        help="Time, in seconds, to wait between scrapes.")

    parser.add_argument("website",
                        help="URL of civstats webpage to scrape.")

    parser.add_argument("dbfile",
                        help="File to load/store results.")

    args = parser.parse_args(args[1:])

    set_verbosity(args.verbose)

    return args.website, args.dbfile, args.interval

###############################################################################
def get_events_from_webdata(webdata):
###############################################################################
    """
    >>> test_str = r'''
    ... <tr>
    ...   <td align="center" class="smheading">Time</td>
    ...   <td align="center" class="smheading">Player</td>
    ... <td align="center" class="smheading">Event</td>
    ... </tr>
    ... <tr id="event5-8120564-5">
    ...   <td align="center" class="dark">12/15/15 2:17 am</td>
    ...   <td align="center" class="dark">blueraja</td>
    ...   <td align="center" class="event5">Logged out</td>
    ... </tr>
    ... <tr id="event8-8120563-5">
    ...   <td align="center" class="dark">12/15/15 2:15 am</td>
    ...   <td align="center" class="dark">blueraja</td>
    ...   <td align="center" class="event8">Finished turn</td>
    ... </tr>
    ... <tr id="event4-8120562-5">
    ...   <td align="center" class="dark">12/15/15 2:14 am</td>
    ...   <td align="center" class="dark">blueraja</td>
    ...   <td align="center" class="event4">Logged in</td>
    ... </tr>
    ... <tr id="event5-8120466-3">
    ...   <td align="center" class="dark">12/14/15 9:04 pm</td>
    ...   <td align="center" class="dark">beefybro</td>
    ...   <td align="center" class="event5">Logged out</td>
    ... </tr>
    ... <tr id="event2-8120465-3">
    ...   <td align="center" class="dark">12/14/15 9:03 pm</td>
    ...   <td align="center" class="dark">beefybro</td>
    ...   <td align="center" class="event2">Score decreased to 155</td>
    ... </tr>
    ... <tr id="event8-8120464-3">
    ...   <td align="center" class="dark">12/14/15 9:02 pm</td>
    ...   <td align="center" class="dark">beefybro</td>
    ...   <td align="center" class="event8">Finished turn</td>
    ... </tr>
    ... <tr id="event4-8120463-3">
    ...   <td align="center" class="dark">12/14/15 9:02 pm</td>
    ...   <td align="center" class="dark">beefybro</td>
    ...   <td align="center" class="event4">Logged in</td>
    ... </tr>
    ... '''
    >>> get_events_from_webdata(test_str)
    [('beefybro', 0, 1450152120), ('beefybro', 1, 1450152120), ('beefybro', 3, 1450152180), ('beefybro', 2, 1450152240), ('blueraja', 0, 1450170840), ('blueraja', 1, 1450170900), ('blueraja', 2, 1450171020)]
    """
    begin_block_str = '<tr id="event'
    date_regex = re.compile(r".*>\s*(\d\d?)/(\d\d?)/(\d\d?)\s+(\d\d?):(\d\d?)\s+(am|pm)\s*<")
    player_regex = re.compile(r".*>\s*(.*)\s*<")
    event_regex = re.compile(r".*>\s*(.+)\s*<")
    end_block_str = "</tr>"

    rv = [] # (player, event, date)

    curr_date = None
    curr_player = None
    curr_event = None
    inside_block = False

    for idx, line in enumerate(webdata.splitlines()):
        if (begin_block_str in line):
            expect(not inside_block, "Error at line %d: Already in block!\n\nWebdata:\n%s" % (idx, webdata))
            inside_block = True
        elif (inside_block):
            if (curr_date is None):
                date_match = date_regex.match(line)
                expect(date_match is not None, "Error at line %d: Expected date match\n\nWebdata:\n%s" % (idx, webdata))

                month, day, year, hour, minute, ampm = date_match.groups()
                year, month, day, hour, minute = int(year), int(month), int(day), int(hour), int(minute)
                hour = hour + 12 if ampm == "pm" else hour
                time_tuple = (year, month, day, hour, minute, 0, 0, 0, 0)
                curr_date = int(time.mktime(time_tuple))

            elif (curr_player is None):
                player_match = player_regex.match(line)
                expect(player_match is not None, "Error at line %d: Expected player match\n\nWebdata:\n%s" % (idx, webdata))
                curr_player = player_match.groups()[0]

            elif (curr_event is None):
                event_match = event_regex.match(line)
                expect(event_match is not None, "Error at line %d: Expected event match\n\nWebdata:\n%s" % (idx, webdata))
                curr_event = event_match.groups()[0]

            else:
                expect(end_block_str in line, "Error at line %d: Expected end of block\n\nWebdata:\n%s" % (idx, webdata))
                rv.insert( 0, (curr_player, curr_event, curr_date) )
                curr_date, curr_player, curr_event = None, None, None
                inside_block = False

    expect(not inside_block, "File terminated without completing block\n\nWebdata:\n%s" % webdata)

    return rv

###############################################################################
def bagger_board(website, dbfile, interval):
###############################################################################
    while (True):
        # Get data
        webdata = run_cmd("curl %s" % website)

        # Convert webdata to state
        events = get_events_from_webdata(webdata)

        # update db file
        update_db_file(dbfile, events)

        time.sleep(interval)

        sys.stdout.write(".")
        sys.stdout.flush()

###############################################################################
def _main_func(description):
###############################################################################
    if ("--test" in sys.argv):
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    website, dbfile, interval = parse_command_line(sys.argv, description)

    bagger_board(website, dbfile, interval)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
